// In java string is an object.
// The characters are stored in 16 bits.

/* Creation of strings */

// 2 ways: 

// 1. String literal
// Created using double quotes. Eg: String s = "Hello";

// Each time you create a string literal, the JVM checks the string literal pool to see if an object with the same value already exists.
// If it does, the reference to the existing object is returned.
// If it doesn't, a new object is created and added to the pool.
// Each time you create a string object, a new object is created in the heap memory.

// 2. String object (new keyword).
// Created using new keyword. Eg: String s = new String("Hello");

/* Methods available in String class */

// 1. length()
// Returns the number of characters in the string.
// Eg: String s = "Hello";
// System.out.println(s.length()); // Output: 5

// 2. charAt()
// Returns the character at the specified index.
// Eg: String s = "Hello";
// System.out.println(s.charAt(0)); // Output: H

// 3. substring()
// Returns the substring of the string. It has two forms.     
// Eg: String s = "Hello";
// System.out.println(s.substring(0, 4)); // Output: Hell, gets from starts index to end index - 1 (0 is start index and 4 is end index).
// System.out.println(s.substring(2)); // Output: llo, gets from start index to end of the string (2 is start index).

// 4. indexOf()
// Returns the index of the first occurrence of the specified character.
// Eg: String s = "Hello";
// System.out.println(s.indexOf('e')); // Output: 1

// 5. lastIndexOf()
// Returns the index of the last occurrence of the specified character.
// Eg: String s = "Hello";
// System.out.println(s.lastIndexOf('e')); // Output: 3

// 6. equals()
// Returns true if the strings are equal.   
// Eg: String s1 = "Hello";
// String s2 = "Hello";
// System.out.println(s1.equals(s2)); // Output: true

// 7. equalsIgnoreCase()
// Returns true if the strings are equal ignoring the case. 
// Eg: String s1 = "Hello"; 
// String s2 = "hello";
// System.out.println(s1.equalsIgnoreCase(s2)); // Output: true

// 8. toLowerCase()
// Returns the string in lowercase. 
// Eg: String s = "Hello";
// System.out.println(s.toLowerCase()); // Output: hello

// 9. toUpperCase()
// Returns the string in uppercase.
// Eg: String s = "Hello";
// System.out.println(s.toUpperCase()); // Output: HELLO

// 10. trim()
// Returns a copy if invoking string from which any leading and trailing white spaces are removed.
// Eg: String s = " Hello ";
// System.out.println(s.trim()); // Output: Hello

// 11. split()
// Divides the string at the specified regex and returns an array of strings.
// If i give negative number as limit, it will return all the strings.
// If i give 0 as limit, it will return all the strings except the last one.
// If i give positive number as limit, it will return the strings upto the limit.
// Eg:String s = "Hello World";
// String[] arr = s.split(" ", 0);
// System.out.println(Arrays.toString(arr)); // Output: [Hello, World]

// 12. replace()
// A string replace (char original, char replacement).
// String replace (CharSequence target, CharSequence replacement).
// It replaces all the occurrences of the original character with the replacement character.
// Eg: String s = "Hello World";
// System.out.println(s.replace("World", "Java")); // Output: Hello Java

// 13. contains()
// Checks if the specified string is present in the string or not.
// Eg: String s = "Hello World";
// System.out.println(s.contains("World")); // Output: true 

// 14. startsWith()
// Returns true if the string starts with the specified character.
// Eg: String s = "Hello World";
// System.out.println(s.startsWith("Hello")); // Output: true   

// 15. endsWith()
// Returns true if the string ends with the specified character.
// Eg: String s = "Hello World";
// System.out.println(s.endsWith("World")); // Output: true 

// 16. join()
// Returns a new string with the given elements joined by the specified delimiter.
// Eg: String[] arr = {"Hello", "World"};
// System.out.println(String.join(" ", arr)); // Output: Hello World   

// 17. format()
// Returns the formatted string.
// Eg: String s = "Hello %s";
// System.out.println(String.format(s, "World")); // Output: Hello World    

// 18. valueOf()
// Returns the string representation of the specified value.
// Eg: int a = 10;
// System.out.println(String.valueOf(a)); // Output: 10 

// 19. intern()
// Ensures that all strings having the same content use the same memory location.
// Eg: String s = "Hello";
// System.out.println(s.intern()); // Output: Hello 

// 20. isEmpty()
// Returns true if the string is empty.
// Eg: String s = "";
// System.out.println(s.isEmpty()); // Output: true
// A non initialized string is not an empty string, using isEmpty() will return error.

// 21. isBlank()
// Returns true if the string is empty or contains only white spaces.
// Eg: String s = " ";
// System.out.println(s.isBlank()); // Output: true 

// 22. strip()
// Returns the string without leading and trailing white spaces.
// Eg: String s = " Hello ";
// System.out.println(s.strip()); // Output: Hello

// 23. getChars()
// Copies the characters from the string to the specified array.
// Eg: String s = "Hello";
// char[] arr = new char[5];
// s.getChars(0, 5, arr, 0);
// System.out.println(Arrays.toString(arr)); // Output: [H, e, l, l, o]

// 24. getBytes()
// Converts the string to a byte array.
// Eg: String s = "Hello";
// byte[] arr = s.getBytes();
// System.out.println(Arrays.toString(arr)); // Output: [72, 101, 108, 108, 111]

// 25. compareTo()
// Compares the string with the specified string.
// Compares the strings lexicographically.
// The comparision is based on the unicode value of each character in the string (ASCII value).
// Returns 0 if the strings are equal.
// Returns positive value if the string is lexicographically greater than the specified string.
// Returns negative value if the string is lexicographically less than the specified string.
// Eg: String s1 = "Hello";
// String s2 = "Hello";
// System.out.println(s1.compareTo(s2)); // Output: 0   

// 26. compareToIgnoreCase()
// Compares the string with the specified string ignoring the case.
// Eg: String s1 = "Hello";
// String s2 = "hello";
// System.out.println(s1.compareToIgnoreCase(s2)); // Output: 0 

// 27. regionMatches()
// Checks if the substring of the string matches the substring of the specified string.
// Eg: String s1 = "Hello World";
// String s2 = "World";
// System.out.println(s1.regionMatches(5, s2, 0, 5)); // Output: true

// 28. boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)
// Checks if the substring of the string matches the substring of the specified string.
// Eg: String s1 = "Hello World";
// String s2 = "World";
// System.out.println(s1.regionMatches(true, 5, s2, 0, 5)); // Output: true 

// 29. startsWith()
// Checks if the string starts with the specified character.
// Eg: String s = "Hello World";
// System.out.println(s.startsWith("Hello")); // Output: true

// 30. endsWith()
// Checks if the string ends with the specified character.  
// Eg: String s = "Hello World";
// System.out.println(s.endsWith("World")); // Output: true 

// 31. matches()
// Checks if the string matches the specified regex.
// String regex = "^J..a$"; // ^ is the start of the string, . is any character and the no of . indicates the no of characters, a is the end of the string.
// String s1 = "Java";
// System.out.println(s1.matches(regex));

// 32. replaceFirst()
// Replaces the first occurrence of the specified character with the new character.
// String regex, String replacement.
// Eg: String s = "Hello World";
// System.out.println(s.replaceFirst("World", "Java")); // Output: Hello Java

// 33. replaceAll()
// Replaces all the occurrences of the specified regex with the new character.
// Eg: String s = "Hello World";
// System.out.println(s.replaceAll("World", "Java")); // Output: Hello Java


// getChars, getBytes, equals, equalsIgnoreCase, regionMatches, startsWith, endsWith, indexOf, lastIndexOf, join, isEmpty, intern, substring, contains, 
// matches, compareTo, compareToIgnoreCase, replace, replaceFirst, replaceAll, trim, split